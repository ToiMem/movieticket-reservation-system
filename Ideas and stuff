Ideas:

Some good JSON libraries are: Gson, Genson, Jackson and FlexJson. 
I looked a bit into Gson and it looks pretty simple:

 Gson gson = new Gson(); // Or use new GsonBuilder().create();
 MyType target = new MyType();
 String json = gson.toJson(target); // serializes target to Json
 MyType target2 = gson.fromJson(json, MyType.class); // deserializes json into target2
 
 I haven't yet looked into the other alternatives -@joel
 
 I've now added the gson-library into our project and build path so it should be 
 working straight away for everybody but I'm not totally sure(worked for my home computer). 
 If it doesn't, expand the lib-folder and right click the gson-2.3.1.jar and
 select "Build path" -> "Add to Build path". Should work. 
 http://www.wikihow.com/Add-JARs-to-Project-Build-Paths-in-Eclipse-%28Java%29  -@joel
 
 We've got to save the running iD to the JSON-file and read it whenever it is needed(new user creation)
 so that no iD is the same. We also need 2 different interfaces, customerInterface and adminInterface.
 AdminInterface contains the functionality to add/remove/modify movies/shows/etc and customerInterface
 has the functions to make and modify your Reservations.
 
 
 We are researching the use of SQLLite database instead of using some JSON. Looks pretty simple.
 
 Required tables:
 USERS : username(Primary Key), password, isPermission.
 RESERVATIONS : iD(Primary Key), username(Foreign Key), theater, show, seats.
 to be continued.